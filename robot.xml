<?xml version="1.0" standalone='yes' ?>
 <Machine>
 	<Header>
 		<Name>
 			<Identifier>SysAlim</Identifier>
 		</Name>
 	</Header>
 	<Sets>
 		<Declaration>
 			<Identifier>Etat_Batterie</Identifier>
 			<Integer>1</Integer>
 			<Integer>2</Integer>
 		</Declaration>
 		<Declaration>
 			<Identifier>Etat_Horloge</Identifier>
 			<Integer>3</Integer>
 			<Integer>4</Integer>
 		</Declaration>
 	</Sets>
 	<AbstractVariables>
 		<ListIdent>
 			<IdentifierComposed>Bat
 				<Identifier>Bat</Identifier>
 			</IdentifierComposed>
 			<IdentifierComposed>Int
 				<Identifier>Int</Identifier>
 			</IdentifierComposed>
 			<IdentifierComposed>H
 				<Identifier>H</Identifier>
 			</IdentifierComposed>
 		</ListIdent>
 	</AbstractVariables>
 	<Invariant>
 		<And>
 			<And>
 				<And>
 					<And>
 						<In>
 							<ListExpression>
 								<IdentifierComposed>Bat
 									<Identifier>Bat</Identifier>
 								</IdentifierComposed>
 							</ListExpression>
 							<TotalFunction>
 								<NatRange>
 									<Integer>1</Integer>
 									<Integer>3</Integer>
 								</NatRange>
 								<IdentifierComposed>Etat_Batterie
 									<Identifier>Etat_Batterie</Identifier>
 								</IdentifierComposed>
 							</TotalFunction>
 						</In>
 						<In>
 							<ListExpression>
 								<IdentifierComposed>Int
 									<Identifier>Int</Identifier>
 								</IdentifierComposed>
 							</ListExpression>
 							<NatRange>
 								<Integer>1</Integer>
 								<Integer>3</Integer>
 							</NatRange>
 						</In>
 					</And>
 					<In>
 						<ListExpression>
 							<IdentifierComposed>H
 								<Identifier>H</Identifier>
 							</IdentifierComposed>
 						</ListExpression>
 						<IdentifierComposed>Etat_Horloge
 							<Identifier>Etat_Horloge</Identifier>
 						</IdentifierComposed>
 					</In>
 				</And>
 				<Equal>
 					<CallFunction>
 						<IdentifierComposed>Bat
 							<Identifier>Bat</Identifier>
 						</IdentifierComposed>
 						<IdentifierComposed>Int
 							<Identifier>Int</Identifier>
 						</IdentifierComposed>
 					</CallFunction>
 					<Integer>1</Integer>
 				</Equal>
 			</And>
 			<PredicateParenthesis>
 				<Or>
 					<Or>
 						<Equal>
 							<CallFunction>
 								<IdentifierComposed>Bat
 									<Identifier>Bat</Identifier>
 								</IdentifierComposed>
 								<Integer>1</Integer>
 							</CallFunction>
 							<Integer>1</Integer>
 						</Equal>
 						<Equal>
 							<CallFunction>
 								<IdentifierComposed>Bat
 									<Identifier>Bat</Identifier>
 								</IdentifierComposed>
 								<Integer>2</Integer>
 							</CallFunction>
 							<Integer>1</Integer>
 						</Equal>
 					</Or>
 					<Equal>
 						<CallFunction>
 							<IdentifierComposed>Bat
 								<Identifier>Bat</Identifier>
 							</IdentifierComposed>
 							<Integer>3</Integer>
 						</CallFunction>
 						<Integer>1</Integer>
 					</Equal>
 				</Or>
 			</PredicateParenthesis>
 		</And>
 	</Invariant>
 	<Initialisation>
 		<Parallel>
 			<Parallel>
 				<Parallel>
 					<Parallel>
 						<SubstitutionBecomeEqualFunction>
 							<CallFunction>
 								<IdentifierComposed>Bat
 									<Identifier>Bat</Identifier>
 								</IdentifierComposed>
 								<Integer>1</Integer>
 							</CallFunction>
 							<Integer>1</Integer>
 						</SubstitutionBecomeEqualFunction>
 						<SubstitutionBecomeEqualFunction>
 							<CallFunction>
 								<IdentifierComposed>Bat
 									<Identifier>Bat</Identifier>
 								</IdentifierComposed>
 								<Integer>2</Integer>
 							</CallFunction>
 							<Integer>1</Integer>
 						</SubstitutionBecomeEqualFunction>
 					</Parallel>
 					<SubstitutionBecomeEqualFunction>
 						<CallFunction>
 							<IdentifierComposed>Bat
 								<Identifier>Bat</Identifier>
 							</IdentifierComposed>
 							<Integer>3</Integer>
 						</CallFunction>
 						<Integer>1</Integer>
 					</SubstitutionBecomeEqualFunction>
 				</Parallel>
 				<SubstitutionBecomeEqualVariables>
 					<Identifiers>
 						<IdentifierComposed>H
 							<Identifier>H</Identifier>
 						</IdentifierComposed>
 					</Identifiers>
 					<Integer>4</Integer>
 				</SubstitutionBecomeEqualVariables>
 			</Parallel>
 			<SubstitutionBecomeEqualVariables>
 				<Identifiers>
 					<IdentifierComposed>Int
 						<Identifier>Int</Identifier>
 					</IdentifierComposed>
 				</Identifiers>
 				<Integer>1</Integer>
 			</SubstitutionBecomeEqualVariables>
 		</Parallel>
 	</Initialisation>
 	<Operations>
 		<Operation>
 			<Header>
 				<Name>
 					<IdentifierComposed>Arrivee_Tic
 						<Identifier>Arrivee_Tic</Identifier>
 					</IdentifierComposed>
 				</Name>
 			</Header>
 			<SubstitutionSelect>
 				<Equal>
 					<IdentifierComposed>H
 						<Identifier>H</Identifier>
 					</IdentifierComposed>
 					<Integer>4</Integer>
 				</Equal>
 				<Then>
 					<SubstitutionBecomeEqualVariables>
 						<Identifiers>
 							<IdentifierComposed>H
 								<Identifier>H</Identifier>
 							</IdentifierComposed>
 						</Identifiers>
 						<Integer>3</Integer>
 					</SubstitutionBecomeEqualVariables>
 				</Then>
 			</SubstitutionSelect>
 		</Operation>
 		<Operation>
 			<Header>
 				<Name>
 					<IdentifierComposed>Commute
 						<Identifier>Commute</Identifier>
 					</IdentifierComposed>
 				</Name>
 			</Header>
 			<SubstitutionSelect>
 				<And>
 					<PredicateParenthesis>
 						<Or>
 							<Or>
 								<PredicateParenthesis>
 									<And>
 										<Equal>
 											<CallFunction>
 												<IdentifierComposed>Bat
 													<Identifier>Bat</Identifier>
 												</IdentifierComposed>
 												<Integer>1</Integer>
 											</CallFunction>
 											<Integer>1</Integer>
 										</Equal>
 										<Equal>
 											<CallFunction>
 												<IdentifierComposed>Bat
 													<Identifier>Bat</Identifier>
 												</IdentifierComposed>
 												<Integer>2</Integer>
 											</CallFunction>
 											<Integer>1</Integer>
 										</Equal>
 									</And>
 								</PredicateParenthesis>
 								<PredicateParenthesis>
 									<And>
 										<Equal>
 											<CallFunction>
 												<IdentifierComposed>Bat
 													<Identifier>Bat</Identifier>
 												</IdentifierComposed>
 												<Integer>1</Integer>
 											</CallFunction>
 											<Integer>1</Integer>
 										</Equal>
 										<Equal>
 											<CallFunction>
 												<IdentifierComposed>Bat
 													<Identifier>Bat</Identifier>
 												</IdentifierComposed>
 												<Integer>3</Integer>
 											</CallFunction>
 											<Integer>1</Integer>
 										</Equal>
 									</And>
 								</PredicateParenthesis>
 							</Or>
 							<PredicateParenthesis>
 								<And>
 									<Equal>
 										<CallFunction>
 											<IdentifierComposed>Bat
 												<Identifier>Bat</Identifier>
 											</IdentifierComposed>
 											<Integer>2</Integer>
 										</CallFunction>
 										<Integer>1</Integer>
 									</Equal>
 									<Equal>
 										<CallFunction>
 											<IdentifierComposed>Bat
 												<Identifier>Bat</Identifier>
 											</IdentifierComposed>
 											<Integer>3</Integer>
 										</CallFunction>
 										<Integer>1</Integer>
 									</Equal>
 								</And>
 							</PredicateParenthesis>
 						</Or>
 					</PredicateParenthesis>
 					<Equal>
 						<IdentifierComposed>H
 							<Identifier>H</Identifier>
 						</IdentifierComposed>
 						<Integer>3</Integer>
 					</Equal>
 				</And>
 				<Then>
 					<SubstitutionAny>
 						<ListIdent>
 							<IdentifierComposed>ni
 								<Identifier>ni</Identifier>
 							</IdentifierComposed>
 						</ListIdent>
 						<And>
 							<And>
 								<In>
 									<ListExpression>
 										<IdentifierComposed>ni
 											<Identifier>ni</Identifier>
 										</IdentifierComposed>
 									</ListExpression>
 									<NatRange>
 										<Integer>1</Integer>
 										<Integer>3</Integer>
 									</NatRange>
 								</In>
 								<NotEqual>
 									<IdentifierComposed>ni
 										<Identifier>ni</Identifier>
 									</IdentifierComposed>
 									<IdentifierComposed>Int
 										<Identifier>Int</Identifier>
 									</IdentifierComposed>
 								</NotEqual>
 							</And>
 							<Equal>
 								<CallFunction>
 									<IdentifierComposed>Bat
 										<Identifier>Bat</Identifier>
 									</IdentifierComposed>
 									<IdentifierComposed>ni
 										<Identifier>ni</Identifier>
 									</IdentifierComposed>
 								</CallFunction>
 								<Integer>1</Integer>
 							</Equal>
 						</And>
 						<Then>
 							<Parallel>
 								<SubstitutionBecomeEqualVariables>
 									<Identifiers>
 										<IdentifierComposed>Int
 											<Identifier>Int</Identifier>
 										</IdentifierComposed>
 									</Identifiers>
 									<IdentifierComposed>ni
 										<Identifier>ni</Identifier>
 									</IdentifierComposed>
 								</SubstitutionBecomeEqualVariables>
 								<SubstitutionBecomeEqualVariables>
 									<Identifiers>
 										<IdentifierComposed>H
 											<Identifier>H</Identifier>
 										</IdentifierComposed>
 									</Identifiers>
 									<Integer>4</Integer>
 								</SubstitutionBecomeEqualVariables>
 							</Parallel>
 						</Then>
 					</SubstitutionAny>
 				</Then>
 			</SubstitutionSelect>
 		</Operation>
 		<Operation>
 			<Header>
 				<Name>
 					<IdentifierComposed>Panne_Batterie
 						<Identifier>Panne_Batterie</Identifier>
 					</IdentifierComposed>
 				</Name>
 			</Header>
 			<SubstitutionSelect>
 				<PredicateParenthesis>
 					<Or>
 						<Or>
 							<PredicateParenthesis>
 								<And>
 									<Equal>
 										<CallFunction>
 											<IdentifierComposed>Bat
 												<Identifier>Bat</Identifier>
 											</IdentifierComposed>
 											<Integer>1</Integer>
 										</CallFunction>
 										<Integer>1</Integer>
 									</Equal>
 									<Equal>
 										<CallFunction>
 											<IdentifierComposed>Bat
 												<Identifier>Bat</Identifier>
 											</IdentifierComposed>
 											<Integer>2</Integer>
 										</CallFunction>
 										<Integer>1</Integer>
 									</Equal>
 								</And>
 							</PredicateParenthesis>
 							<PredicateParenthesis>
 								<And>
 									<Equal>
 										<CallFunction>
 											<IdentifierComposed>Bat
 												<Identifier>Bat</Identifier>
 											</IdentifierComposed>
 											<Integer>1</Integer>
 										</CallFunction>
 										<Integer>1</Integer>
 									</Equal>
 									<Equal>
 										<CallFunction>
 											<IdentifierComposed>Bat
 												<Identifier>Bat</Identifier>
 											</IdentifierComposed>
 											<Integer>3</Integer>
 										</CallFunction>
 										<Integer>1</Integer>
 									</Equal>
 								</And>
 							</PredicateParenthesis>
 						</Or>
 						<PredicateParenthesis>
 							<And>
 								<Equal>
 									<CallFunction>
 										<IdentifierComposed>Bat
 											<Identifier>Bat</Identifier>
 										</IdentifierComposed>
 										<Integer>2</Integer>
 									</CallFunction>
 									<Integer>1</Integer>
 								</Equal>
 								<Equal>
 									<CallFunction>
 										<IdentifierComposed>Bat
 											<Identifier>Bat</Identifier>
 										</IdentifierComposed>
 										<Integer>3</Integer>
 									</CallFunction>
 									<Integer>1</Integer>
 								</Equal>
 							</And>
 						</PredicateParenthesis>
 					</Or>
 				</PredicateParenthesis>
 				<Then>
 					<SubstitutionAny>
 						<ListIdent>
 							<IdentifierComposed>nb
 								<Identifier>nb</Identifier>
 							</IdentifierComposed>
 						</ListIdent>
 						<And>
 							<In>
 								<ListExpression>
 									<IdentifierComposed>nb
 										<Identifier>nb</Identifier>
 									</IdentifierComposed>
 								</ListExpression>
 								<NatRange>
 									<Integer>1</Integer>
 									<Integer>3</Integer>
 								</NatRange>
 							</In>
 							<Equal>
 								<CallFunction>
 									<IdentifierComposed>Bat
 										<Identifier>Bat</Identifier>
 									</IdentifierComposed>
 									<IdentifierComposed>nb
 										<Identifier>nb</Identifier>
 									</IdentifierComposed>
 								</CallFunction>
 								<Integer>1</Integer>
 							</Equal>
 						</And>
 						<Then>
 							<Parallel>
 								<SubstitutionBecomeEqualFunction>
 									<CallFunction>
 										<IdentifierComposed>Bat
 											<Identifier>Bat</Identifier>
 										</IdentifierComposed>
 										<IdentifierComposed>nb
 											<Identifier>nb</Identifier>
 										</IdentifierComposed>
 									</CallFunction>
 									<Integer>2</Integer>
 								</SubstitutionBecomeEqualFunction>
 								<SubstitutionIf>
 									<Equal>
 										<IdentifierComposed>nb
 											<Identifier>nb</Identifier>
 										</IdentifierComposed>
 										<IdentifierComposed>Int
 											<Identifier>Int</Identifier>
 										</IdentifierComposed>
 									</Equal>
 									<Then>
 										<SubstitutionAny>
 											<ListIdent>
 												<IdentifierComposed>ni
 													<Identifier>ni</Identifier>
 												</IdentifierComposed>
 											</ListIdent>
 											<And>
 												<And>
 													<In>
 														<ListExpression>
 															<IdentifierComposed>ni
 																<Identifier>ni</Identifier>
 															</IdentifierComposed>
 														</ListExpression>
 														<NatRange>
 															<Integer>1</Integer>
 															<Integer>3</Integer>
 														</NatRange>
 													</In>
 													<NotEqual>
 														<IdentifierComposed>ni
 															<Identifier>ni</Identifier>
 														</IdentifierComposed>
 														<IdentifierComposed>Int
 															<Identifier>Int</Identifier>
 														</IdentifierComposed>
 													</NotEqual>
 												</And>
 												<Equal>
 													<CallFunction>
 														<IdentifierComposed>Bat
 															<Identifier>Bat</Identifier>
 														</IdentifierComposed>
 														<IdentifierComposed>ni
 															<Identifier>ni</Identifier>
 														</IdentifierComposed>
 													</CallFunction>
 													<Integer>1</Integer>
 												</Equal>
 											</And>
 											<Then>
 												<SubstitutionBecomeEqualVariables>
 													<Identifiers>
 														<IdentifierComposed>Int
 															<Identifier>Int</Identifier>
 														</IdentifierComposed>
 													</Identifiers>
 													<IdentifierComposed>ni
 														<Identifier>ni</Identifier>
 													</IdentifierComposed>
 												</SubstitutionBecomeEqualVariables>
 											</Then>
 										</SubstitutionAny>
 									</Then>
 								</SubstitutionIf>
 							</Parallel>
 						</Then>
 					</SubstitutionAny>
 				</Then>
 			</SubstitutionSelect>
 		</Operation>
 		<Operation>
 			<Header>
 				<Name>
 					<IdentifierComposed>Reparer_Panne
 						<Identifier>Reparer_Panne</Identifier>
 					</IdentifierComposed>
 				</Name>
 			</Header>
 			<SubstitutionAny>
 				<ListIdent>
 					<IdentifierComposed>nb
 						<Identifier>nb</Identifier>
 					</IdentifierComposed>
 				</ListIdent>
 				<And>
 					<In>
 						<ListExpression>
 							<IdentifierComposed>nb
 								<Identifier>nb</Identifier>
 							</IdentifierComposed>
 						</ListExpression>
 						<NatRange>
 							<Integer>1</Integer>
 							<Integer>3</Integer>
 						</NatRange>
 					</In>
 					<Equal>
 						<CallFunction>
 							<IdentifierComposed>Bat
 								<Identifier>Bat</Identifier>
 							</IdentifierComposed>
 							<IdentifierComposed>nb
 								<Identifier>nb</Identifier>
 							</IdentifierComposed>
 						</CallFunction>
 						<Integer>2</Integer>
 					</Equal>
 				</And>
 				<Then>
 					<SubstitutionBecomeEqualFunction>
 						<CallFunction>
 							<IdentifierComposed>Bat
 								<Identifier>Bat</Identifier>
 							</IdentifierComposed>
 							<IdentifierComposed>nb
 								<Identifier>nb</Identifier>
 							</IdentifierComposed>
 						</CallFunction>
 						<Integer>1</Integer>
 					</SubstitutionBecomeEqualFunction>
 				</Then>
 			</SubstitutionAny>
 		</Operation>
 	</Operations>
 </Machine>
